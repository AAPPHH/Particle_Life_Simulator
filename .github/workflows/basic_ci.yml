name: Continuous Integration
on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
jobs:
  build:
    name: Build and Test on ${{ matrix.os }} with Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.12"]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Display Python version
        run: |
          echo "Python executable: $(which python)"
          python --version

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]

      - name: Install GUI dependencies for VisPy
        run: pip install PyQt5

      - name: Set VisPy backend
        run: echo "VISPY_USE_APP=pyqt5" >> $GITHUB_ENV

      - name: Set PYTHONPATH
        run: echo "PYTHONPATH=$GITHUB_WORKSPACE/particle_life_simulator" >> $GITHUB_ENV

      - name: Show installed Python packages
        run: pip list

      - name: Run Black (format code)
        run: black .

      - name: Run isort (format imports)
        run: isort .

      - name: Verify import sorting with isort
        run: isort --check-only .

      - name: Run code linting with Ruff
        run: ruff check .
        
      - name: Set up virtual display (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y xvfb
          Xvfb :99 -screen 0 1280x1024x24 & echo "Virtual display started"
          echo "DISPLAY=:99" >> $GITHUB_ENV

      - name: Set Qt Backend
        run: echo "QT_QPA_PLATFORM=offscreen" >> $GITHUB_ENV

      - name: Run standard tests
        run: pytest tests/ --ignore=tests/test_profiler.py --tb=long -v --maxfail=3

      - name: Run profiling tests
        if: runner.os == 'Linux'
        run: pytest tests/test_profiler.py --tb=long -v --maxfail=3

  generate-diagrams:
    name: Generate Profiling Diagrams
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: pip install matplotlib pandas

      - name: Ensure profiling results exist
        run: |
          if [ ! -f profiling/profiling_results.txt ]; then
            echo "âš  Warning: profiling_results.txt not found. Creating an empty file."
            mkdir -p profiling
            echo "No profiling data available." > profiling/profiling_results.txt
          fi

      - name: Generate profiling diagrams
        run: python profiling/visualize_profiling.py

      - name: Upload profiling diagrams
        uses: actions/upload-artifact@v4
        with:
          name: profiling-diagrams
          path: profiling/profiling_visualization.png
